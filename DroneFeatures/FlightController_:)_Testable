//Compatable with Black Pegasus

#include <Wire.h>               //Include the Wire.h library so we can communicate with the gyro
#include <EEPROM.h>             //Include the EEPROM.h library so we can store information onto the EEPROM
#include <Servo.h>

//Declaring Global Variables
byte last_channel_1, last_channel_2, last_channel_3, last_channel_4;
byte lowByte, highByte, type, gyro_address, error, clockspeed_ok;
byte channel_1_assign, channel_2_assign, channel_3_assign, channel_4_assign;
byte roll_axis, pitch_axis, yaw_axis;
byte receiver_check_byte, gyro_check_byte;
int receiver_input_channel_1_leftright, receiver_input_channel_2_forwardback, receiver_input_channel_3_throttle, receiver_input_channel_4_rotate;
int center_channel_1, center_channel_2, center_channel_3, center_channel_4;
int high_channel_1, high_channel_2, high_channel_3, high_channel_4;
int low_channel_1, low_channel_2, low_channel_3, low_channel_4;
int address, cal_int, start;
unsigned long timer, timer_1, timer_2, timer_3, timer_4, current_time;
float gyro_pitch, gyro_roll, gyro_yaw;
float gyro_roll_cal, gyro_pitch_cal, gyro_yaw_cal;
int throttle;
byte eeprom_data[36];

int gyro_x, gyro_y, gyro_z;
long gyro_x_cal, gyro_y_cal, gyro_z_cal;
boolean set_gyro_angles;


long acc_x, acc_y, acc_z, acc_total_vector;
float angle_roll_acc, angle_pitch_acc;

float angle_pitch, angle_roll;
int angle_pitch_buffer, angle_roll_buffer;
float angle_pitch_output, angle_roll_output;

long loop_timer;
int temp;

boolean motors_on;

Servo motor1;
Servo motor2;
Servo motor3;
Servo motor4;//4, 5, 6, 7

//PID variables

float pid_error_temp;
float pid_i_mem_roll, pid_roll_setpoint, gyro_roll_input, pid_output_roll, pid_last_roll_d_error;
float pid_i_mem_pitch, pid_pitch_setpoint, gyro_pitch_input, pid_output_pitch, pid_last_pitch_d_error;
float pid_i_mem_yaw, pid_yaw_setpoint, gyro_yaw_input, pid_output_yaw, pid_last_yaw_d_error;
//float angle_roll_acc, angle_pitch_acc, angle_pitch, angle_roll
int esc_1, esc_2, esc_3, esc_4;


float pid_p_gain_roll = 1.3;               //Gain setting for the roll P-controller
float pid_i_gain_roll = 0.04;              //Gain setting for the roll I-controller
float pid_d_gain_roll = 18.0;              //Gain setting for the roll D-controller
int pid_max_roll = 400;                    //Maximum output of the PID-controller (+/-)

float pid_p_gain_pitch = pid_p_gain_roll;  //Gain setting for the pitch P-controller.
float pid_i_gain_pitch = pid_i_gain_roll;  //Gain setting for the pitch I-controller.
float pid_d_gain_pitch = pid_d_gain_roll;  //Gain setting for the pitch D-controller.
int pid_max_pitch = pid_max_roll;          //Maximum output of the PID-controller (+/-)

float pid_p_gain_yaw = 4.0;                //Gain setting for the pitch P-controller. //4.0
float pid_i_gain_yaw = 0.02;               //Gain setting for the pitch I-controller. //0.02
float pid_d_gain_yaw = 0.0;                //Gain setting for the pitch D-controller.
int pid_max_yaw = 400;                     //Maximum output of the PID-controller (+/-)

int current_iteration = 0;





void setup(){
  Serial.println("pending....");  
//  motors_on = true;
  //pinMode(12, OUTPUT);
  //Arduino (Atmega) pins default to inputs, so they don't need to be explicitly declared as inputs
  PCICR |= (1 << PCIE0);    // set PCIE0 to enable PCMSK0 scan
  PCMSK0 |= (1 << PCINT0);  // set PCINT0 (digital input 8) to trigger an interrupt on state change
  PCMSK0 |= (1 << PCINT1);  // set PCINT1 (digital input 9)to trigger an interrupt on state change
  PCMSK0 |= (1 << PCINT2);  // set PCINT2 (digital input 10)to trigger an interrupt on state change
  PCMSK0 |= (1 << PCINT3);  // set PCINT3 (digital input 11)to trigger an interrupt on state change
  Wire.begin();             //Start the I2C as master
  Wire.setClock(400000);


  //Serial.begin(57600);      //Start the serial connetion @ 57600bps
setup_mpu_6050_registers();                                          //Setup the registers of the MPU-6050 
  for (int cal_int = 0; cal_int < 1000 ; cal_int ++){                  //Read the raw acc and gyro data from the MPU-6050 for 1000 times
    read_mpu_6050_data();                                             
    gyro_x_cal += gyro_x;                                              //Add the gyro x offset to the gyro_x_cal variable
    gyro_y_cal += gyro_y;                                              //Add the gyro y offset to the gyro_y_cal variable
    gyro_z_cal += gyro_z;                                              //Add the gyro z offset to the gyro_z_cal variable
    delay(3);                                                          //Delay 3us to have 250Hz for-loop
  }

  // divide by 1000 to get avarage offset
  gyro_x_cal /= 1000;                                                 
  gyro_y_cal /= 1000;                                                 
  gyro_z_cal /= 1000;                                                 
  Serial.begin(115200);
  loop_timer = micros(); 

  delay(250);               //Give the gyro time to start 

  pinMode(8, INPUT); // Set input pin 5 as an input
  pinMode(9, INPUT);
  pinMode(10, INPUT);
  pinMode(12, INPUT);

  motor1.attach(4);
  motor2.attach(5);
  motor3.attach(6);
  motor4.attach(7);

  motor1.writeMicroseconds(1000); //so the motors dont spin when the drone is starting up
  motor2.writeMicroseconds(1000); 
  motor3.writeMicroseconds(1000);
  motor4.writeMicroseconds(1000);

}
ISR(PCINT0_vect){
  current_time = micros();
  //Channel 1=========================================
  if(PINB & B00000001){                                        //Is input 8 high?
    if(last_channel_1 == 0){                                   //Input 8 changed from 0 to 1
      last_channel_1 = 1;                                      //Remember current input state
      timer_1 = current_time;                                  //Set timer_1 to current_time
    }
  }
  else if(last_channel_1 == 1){                                //Input 8 is not high and changed from 1 to 0
    last_channel_1 = 0;                                        //Remember current input state
    receiver_input_channel_1_leftright = current_time - timer_1;         //Channel 1 is current_time - timer_1
  }
  //Channel 2=========================================
  if(PINB & B00000010 ){                                       //Is input 9 high?
    if(last_channel_2 == 0){                                   //Input 9 changed from 0 to 1
      last_channel_2 = 1;                                      //Remember current input state
      timer_2 = current_time;                                  //Set timer_2 to current_time
    }
  }
  else if(last_channel_2 == 1){                                //Input 9 is not high and changed from 1 to 0
    last_channel_2 = 0;                                        //Remember current input state
    receiver_input_channel_2_forwardback = current_time - timer_2;         //Channel 2 is current_time - timer_2
  }
  //Channel 3=========================================
  if(PINB & B00000100 ){                                       //Is input 10 high?
    if(last_channel_3 == 0){                                   //Input 10 changed from 0 to 1
      last_channel_3 = 1;                                      //Remember current input state
      timer_3 = current_time;                                  //Set timer_3 to current_time
    }
  }
  else if(last_channel_3 == 1){                                //Input 10 is not high and changed from 1 to 0
    last_channel_3 = 0;                                        //Remember current input state
    receiver_input_channel_3_throttle = current_time - timer_3;         //Channel 3 is current_time - timer_3

  }
  //Channel 4=========================================
  if(PINB & B00001000 ){                                       //Is input 11 high?
    if(last_channel_4 == 0){                                   //Input 11 changed from 0 to 1
      last_channel_4 = 1;                                      //Remember current input state
      timer_4 = current_time;                                  //Set timer_4 to current_time
    }
  }
  else if(last_channel_4 == 1){                                //Input 11 is not high and changed from 1 to 0
    last_channel_4 = 0;                                        //Remember current input state
    receiver_input_channel_4_rotate = current_time - timer_4;         //Channel 4 is current_time - timer_4
  }
}
void loop() 
{
  read_mpu_6050_data();   

  gyro_roll_input = (gyro_roll_input * 0.7) + ((gyro_roll / 65.5) * 0.3);   //Gyro pid input is deg/sec.
  gyro_pitch_input = (gyro_pitch_input * 0.7) + ((gyro_pitch / 65.5) * 0.3);//Gyro pid input is deg/sec.
  gyro_yaw_input = (gyro_yaw_input * 0.7) + ((gyro_yaw / 65.5) * 0.3);      //Gyro pid input is deg/sec.
  //Subtract the offset values from the raw gyro values
  gyro_x -= gyro_x_cal;                                                
  gyro_y -= gyro_y_cal;                                                
  gyro_z -= gyro_z_cal;                                                
       
  //Gyro angle calculations . Note 0.0000611 = 1 / (250Hz x 65.5)
  angle_pitch += gyro_x * 0.0000611;                                   //Calculate the traveled pitch angle and add this to the angle_pitch variable
  angle_roll += gyro_y * 0.0000611;                                    //Calculate the traveled roll angle and add this to the angle_roll variable
  //0.000001066 = 0.0000611 * (3.142(PI) / 180degr) The Arduino sin function is in radians
  angle_pitch += angle_roll * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the roll angle to the pitch angel
  angle_roll -= angle_pitch * sin(gyro_z * 0.000001066);               //If the IMU has yawed transfer the pitch angle to the roll angel
  
  //Accelerometer angle calculations
  acc_total_vector = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));  //Calculate the total accelerometer vector
  //57.296 = 1 / (3.142 / 180) The Arduino asin function is in radians
  angle_pitch_acc = asin((float)acc_y/acc_total_vector)* 57.296;       //Calculate the pitch angle
  angle_roll_acc = asin((float)acc_x/acc_total_vector)* -57.296;       //Calculate the roll angle
  
  angle_pitch_acc -= 0.0;                                              //Accelerometer calibration value for pitch
  angle_roll_acc -= 0.0;                                               //Accelerometer calibration value for roll

  angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
  angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
  
//  if(set_gyro_angles)
//  {                                                 //If the IMU is already started
//    angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
//    angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
//  }
//  else
//  {                                                                //At first start
//    angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle 
//    angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle 
//    set_gyro_angles = true;                                            //Set the IMU started flag
//  }
  
  //To dampen the pitch and roll angles a complementary filter is used
  angle_pitch_output = angle_pitch_output * 0.9 + angle_pitch * 0.1;   //Take 90% of the output pitch value and add 10% of the raw pitch value
  angle_roll_output = angle_roll_output * 0.9 + angle_roll * 0.1;      //Take 90% of the output roll value and add 10% of the raw roll value

//  Serial.print(angle_pitch_output);
//  Serial.print(" = aangle pitch, ");
//  Serial.print(angle_roll_output);
//  Serial.print(" = angle roll, ");
  
  
//  Serial.print("\nAngle                  = "); Serial.print(angle_pitch_output);
  
  while(micros() - loop_timer < 4000){  
                                 //Wait until the loop_timer reaches 4000us/4ms (250Hz) before starting the next loop
  }
  loop_timer = micros();//Reset the loop timer
  
  
//  Serial.print("\nLeft / right      (rlr): "); Serial.print(receiver_input_channel_1_leftright);    //right stick left/right
//  Serial.print("\nForward / back    (rud): "); Serial.print(receiver_input_channel_2_forwardback);  //right stick up/down
//  Serial.print("\nThrottle          (lud): "); Serial.print(receiver_input_channel_3_throttle);     //left stick up/down
//  Serial.print("\nYaw left / right  (llr): "); Serial.print(receiver_input_channel_4_rotate);       //left stick left/right
//  Serial.print("\n");
  if ( (receiver_input_channel_4_rotate >= 1950) && (receiver_input_channel_3_throttle <= 1050) ) //if left stick is bottom right corner, allow motors to spin
  {
    motors_on = true;

    angle_pitch = angle_pitch_acc;                                          //Set the gyro pitch angle equal to the accelerometer pitch angle when the quadcopter is started.
    angle_roll = angle_roll_acc;                                            //Set the gyro roll angle equal to the accelerometer roll angle when the quadcopter is started.
    set_gyro_angles = true;                                                 //Set the IMU started flag.

    //Reset the PID controllers for a bumpless start.
    pid_i_mem_roll = 0;
    pid_last_roll_d_error = 0;
    pid_i_mem_pitch = 0;
    pid_last_pitch_d_error = 0;
    pid_i_mem_yaw = 0;
    pid_last_yaw_d_error = 0;
  }
  else if ( (receiver_input_channel_4_rotate <= 1050) && (receiver_input_channel_3_throttle <= 1050) )  //if left stick is bottom left corner, do not allow motors to spin
  {
    motors_on = false;

    
  }
  if (motors_on)
  {
    //The PID set point in degrees per second is determined by the roll receiver input.
  //In the case of deviding by 3 the max roll rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
  pid_roll_setpoint = 0;
  //We need a little dead band of 16us for better results.
  if(receiver_input_channel_1_leftright > 1508)
    pid_roll_setpoint = receiver_input_channel_1_leftright - 1508;
  else if(receiver_input_channel_1_leftright < 1492)
    pid_roll_setpoint = receiver_input_channel_1_leftright - 1492;

//  pid_roll_setpoint -= roll_level_adjust;                                   //Subtract the angle correction from the standardized receiver roll input value.
//  pid_roll_setpoint /= 3.0;                                                 //Divide the setpoint for the PID roll controller by 3 to get angles in degrees.


  //The PID set point in degrees per second is determined by the pitch receiver input.
  //In the case of deviding by 3 the max pitch rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
  pid_pitch_setpoint = 0;
  //We need a little dead band of 16us for better results.
  if(receiver_input_channel_2_forwardback > 1508)
    pid_pitch_setpoint = receiver_input_channel_2_forwardback - 1508;
  else if(receiver_input_channel_2_forwardback < 1492)
    pid_pitch_setpoint = receiver_input_channel_2_forwardback - 1492;

//  pid_pitch_setpoint -= pitch_level_adjust;                                  //Subtract the angle correction from the standardized receiver pitch input value.
//  pid_pitch_setpoint /= 3.0;                                                 //Divide the setpoint for the PID pitch controller by 3 to get angles in degrees.

  //The PID set point in degrees per second is determined by the yaw receiver input.
  //In the case of deviding by 3 the max yaw rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
  pid_yaw_setpoint = 0;
  //We need a little dead band of 16us for better results.
  if(receiver_input_channel_3_throttle > 1050){ //Do not yaw when turning off the motors.
    if(receiver_input_channel_4_rotate > 1508)
      pid_yaw_setpoint = (receiver_input_channel_4_rotate - 1508)/3.0;
    else if(receiver_input_channel_4_rotate < 1492)
      pid_yaw_setpoint = (receiver_input_channel_4_rotate - 1492)/3.0;
  }
//    Serial.println("Motors currently ON");
    
//    Serial.print("Motors written at:");
    if (receiver_input_channel_3_throttle > 1050)   //if it's not at the bottom, then we turn the motors on for real
    {
//      throttle = (  (  (receiver_input_channel_3_throttle - 1000)  /1000) * 830  ) + 1170; //this makes sure all motors spin at once when the throttle is on
        throttle = receiver_input_channel_3_throttle;
        if (throttle > 1800)
          throttle = 1800;
        else if (throttle < 1000)
          throttle = 1000;
      /* motor speed = ( ( (throttle - 1000) / normal range) * real range ) + 1170
       * normal range = 1000
       * 1060 = at least one starts spinning, 1170 = last one starts spinning
       * if throttle > 1060
       * then throttle/2000 = % of max
       * 2000 - 1170 = real range we have to work with
       * real range * % of max + 1170 = speed we should go at
       * real range was lowered from 830 to 630 so that it is possible for the drone to correct while throttle is also at max
       */
      calculate_pid();
//      esc_1 = throttle - pid_output_pitch + pid_output_roll - pid_output_yaw; //Calculate the pulse for esc 1 (front-right - CCW) //copied until
        Serial.print(receiver_input_channel_3_throttle);
        Serial.print(" = controller, \n");
        Serial.print(throttle);
        Serial.print(" = throttle, \n");
//        Serial.print(esc_1);
//        Serial.print(" = motor 1 speed, ");
//        Serial.print(pid_output_pitch);
//        Serial.print(" = pitch, ");
//        Serial.print(pid_output_roll);
//        Serial.print(" = roll, ");
//        Serial.print(pid_output_yaw);
//        Serial.print(" = yaw, ");
//        Serial.print("\n");
      esc_1 = ( ( (throttle - pid_output_pitch) + pid_output_roll) - pid_output_yaw);
      esc_2 = ( ( (throttle + pid_output_pitch) + pid_output_roll) + pid_output_yaw); //Calculate the pulse for esc 2 (rear-right - CW)
      esc_3 = ( ( (throttle + pid_output_pitch) - pid_output_roll) - pid_output_yaw); //Calculate the pulse for esc 3 (rear-left - CCW)
      esc_4 = ( ( (throttle - pid_output_pitch) - pid_output_roll) + pid_output_yaw); //Calculate the pulse for esc 4 (front-left - CW)
//      esc_1 = throttle - pid_output_pitch;
//        Serial.print(esc_1);
//        Serial.print("\n");
//        esc_1 += pid_output_roll;
//        Serial.print(esc_1);
//        Serial.print("\n");
//        esc_1 -= pid_output_yaw;
        Serial.print(esc_1);
////        Serial.print("\t");
////        Serial.print(pid_output_yaw);
        Serial.print(", ");
        
        
        Serial.print(",2: ");
        Serial.print(esc_2);
        Serial.print(",3: ");
        Serial.print(esc_3);
        Serial.print(",4: ");
        Serial.print(esc_4);
        Serial.print("\n");
      
      if (esc_1 < 1100)
        esc_1 = 1100;                                         //Keep the motors running.
      if (esc_2 < 1100)
        esc_2 = 1100;                                         //Keep the motors running.
      if (esc_3 < 1100)
        esc_3 = 1100;                                         //Keep the motors running.
      if (esc_4 < 1100)
        esc_4 = 1100;                                         //Keep the motors running.
  
      if(esc_1 > 2000)
        esc_1 = 2000;                                           //Limit the esc-1 pulse to 2000us.
      if(esc_2 > 2000)
        esc_2 = 2000;                                           //Limit the esc-2 pulse to 2000us.
      if(esc_3 > 2000)
        esc_3 = 2000;                                           //Limit the esc-3 pulse to 2000us.
      if(esc_4 > 2000)
        esc_4 = 2000;                                           //Limit the esc-4 pulse to 2000us.        //right here
      
//      Serial.print(motor_speed);
//      motor1.writeMicroseconds(esc_1);
//      motor2.writeMicroseconds(esc_2);
//      motor3.writeMicroseconds(esc_3);
//      motor4.writeMicroseconds(esc_4);

    }
    else                          //keep motors spinning so the drone doesn't completely fall
    {
      motor1.writeMicroseconds(1170);
      motor2.writeMicroseconds(1170);
      motor3.writeMicroseconds(1170);
      motor4.writeMicroseconds(1170);
      Serial.print("maintain");
      Serial.print("\n");
    }
  }
  else  //if motors should be off
  {
//    Serial.println("Motors currently OFF");
    motor1.writeMicroseconds(1000);
    motor2.writeMicroseconds(1000);
    motor3.writeMicroseconds(1000);
    motor4.writeMicroseconds(1000);
      Serial.print("Off");
      Serial.print("\n");
  }
}

void calculate_pid(){ //pid_error_temp is used in roll, pitch, and yaw  //this entire method copied
  //Roll calculations
  pid_error_temp = gyro_roll_input - pid_roll_setpoint;   //the difference between what the gyro reads and (what the controller says?)
  pid_i_mem_roll += pid_i_gain_roll * pid_error_temp;     //the I in pid = C * ^^^
  if(pid_i_mem_roll > pid_max_roll)                       //if the I is > the max allowed (why is there a max? probably too big an I would cause the drone to stop flying properly for too long, and crash)
    pid_i_mem_roll = pid_max_roll;                        //set I to the max
  else if(pid_i_mem_roll < pid_max_roll * -1)             //else if the I is < the negative max
    pid_i_mem_roll = pid_max_roll * -1;                   //set I to the negative max

  pid_output_roll = pid_p_gain_roll * pid_error_temp + pid_i_mem_roll + pid_d_gain_roll * (pid_error_temp - pid_last_roll_d_error);   //output = 
//output = C * (gyro_roll_input - pid_roll_setpoint) + (+= pid_i_gain_roll * pid_error_temp) + C * (pid_error_temp - pid_last_roll_d_error)
  if(pid_output_roll > pid_max_roll)                      //if output > max allowed
    pid_output_roll = pid_max_roll;                       //set output to max allowed
  else if(pid_output_roll < pid_max_roll * -1)            //else if output < negative max allowed
    pid_output_roll = pid_max_roll * -1;                  //set output to negative max allowed

  pid_last_roll_d_error = pid_error_temp;                 //remember the last error for the D part of pid


//  Serial.print(pid_error_temp);
//  Serial.print(" = pid_error_temp, ");
//  Serial.print(gyro_roll_input);
//  Serial.print(" = gyro_roll_input, ");
//  Serial.print(pid_roll_setpoint);
//  Serial.print(" = pid_roll_setpoint, ");
//  Serial.print(pid_output_pitch);
//  Serial.print(" = pid_output_pitch, ");
//  Serial.print(pid_i_mem_roll);
//  Serial.print(" = pid_i_mem_roll, ");
//  Serial.print(pid_i_gain_roll);
//  Serial.print(" = pid_i_gain_roll, ");
//  Serial.print(pid_output_roll);
//  Serial.print(" = pid_output_roll, ");
  
  
  //Pitch calculations    //same as roll calculations, but different variable names, comments still apply
  pid_error_temp = gyro_pitch_input - pid_pitch_setpoint;
  pid_i_mem_pitch += pid_i_gain_pitch * pid_error_temp;
  if(pid_i_mem_pitch > pid_max_pitch)
    pid_i_mem_pitch = pid_max_pitch;
  else if(pid_i_mem_pitch < pid_max_pitch * -1)
    pid_i_mem_pitch = pid_max_pitch * -1;

  pid_output_pitch = pid_p_gain_pitch * pid_error_temp + pid_i_mem_pitch + pid_d_gain_pitch * (pid_error_temp - pid_last_pitch_d_error);
  if(pid_output_pitch > pid_max_pitch)
    pid_output_pitch = pid_max_pitch;
  else if(pid_output_pitch < pid_max_pitch * -1)
    pid_output_pitch = pid_max_pitch * -1;

  pid_last_pitch_d_error = pid_error_temp;

//if(current_iteration > 100)
//delay(9999999);
//else
//current_iteration++;


  //Yaw calculations    //same as roll calculations, but different variable names, comments still apply, "_gain_" variables have different values than previous two calculations
  pid_error_temp = gyro_yaw_input - pid_yaw_setpoint;
  pid_i_mem_yaw += pid_i_gain_yaw * pid_error_temp;
  if(pid_i_mem_yaw > pid_max_yaw)
    pid_i_mem_yaw = pid_max_yaw;
  else if(pid_i_mem_yaw < pid_max_yaw * -1)
    pid_i_mem_yaw = pid_max_yaw * -1;

  pid_output_yaw = pid_p_gain_yaw * pid_error_temp + pid_i_mem_yaw + pid_d_gain_yaw * (pid_error_temp - pid_last_yaw_d_error);
  if(pid_output_yaw > pid_max_yaw)
    pid_output_yaw = pid_max_yaw;
  else if(pid_output_yaw < pid_max_yaw * -1)
    pid_output_yaw = pid_max_yaw * -1;

  pid_last_yaw_d_error = pid_error_temp;
}



void setup_mpu_6050_registers(){
  //Activate the MPU-6050
  Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
  Wire.write(0x6B);                                                    //Send the requested starting register
  Wire.write(0x00);                                                    //Set the requested starting register
  Wire.endTransmission();                                             
  //Configure the accelerometer (+/-8g)
  Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
  Wire.write(0x1C);                                                    //Send the requested starting register
  Wire.write(0x10);                                                    //Set the requested starting register
  Wire.endTransmission();                                             
  //Configure the gyro (500dps full scale)
  Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
  Wire.write(0x1B);                                                    //Send the requested starting register
  Wire.write(0x08);                                                    //Set the requested starting register
  Wire.endTransmission();                                             
}


void read_mpu_6050_data(){                                              //Subroutine for reading the raw gyro and accelerometer data
  Wire.beginTransmission(0x68);                                        //Start communicating with the MPU-6050
  Wire.write(0x3B);                                                    //Send the requested starting register
  Wire.endTransmission();                                              //End the transmission
  Wire.requestFrom(0x68,14);                                           //Request 14 bytes from the MPU-6050
  while(Wire.available() < 14);                                        //Wait until all the bytes are received
  acc_x = Wire.read()<<8|Wire.read();                                  
  acc_y = Wire.read()<<8|Wire.read();                                  
  acc_z = Wire.read()<<8|Wire.read();                                  
  temp = Wire.read()<<8|Wire.read();                                   
  gyro_x = Wire.read()<<8|Wire.read();                                 
  gyro_y = Wire.read()<<8|Wire.read();                                 
  gyro_z = Wire.read()<<8|Wire.read();                                 
}
